//Autogenerated
package com.vision4j.segmentation;

import com.google.protobuf.ByteString;
import com.vision4j.utils.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import com.vision4j.segmentation.grpc.SegmentationGrpc;
import com.vision4j.segmentation.grpc.Image;
import com.vision4j.segmentation.grpc.SegmentationArray;

import javax.imageio.ImageIO;

public class GrpcSegmentation implements Segmentation {

    private final Categories categories;

    private final SegmentationGrpc.SegmentationBlockingStub segmentationStub;

    public GrpcSegmentation(Categories categories, ManagedChannel channel) {
        this.categories = categories;
        this.segmentationStub = SegmentationGrpc.newBlockingStub(channel);
    }

    public GrpcSegmentation(String[] categoriesArray, ManagedChannel channel) {
        this.categories = new Categories(categoriesArray);
        this.segmentationStub = SegmentationGrpc.newBlockingStub(channel);
    }

    public GrpcSegmentation(String[] categoriesArray, String host, int port) {
        this(categoriesArray, ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());
    }

    public GrpcSegmentation(String[] categoriesArray) {
        this(categoriesArray, "localhost", 50052);
    }

    @Override()
    public Categories getCategories() {
        return this.categories;
    }

    @Override()
    public SegmentationResult segment(InputStream inputStream) throws IOException {
        return this.segment(VisionUtils.toByteArray(inputStream));
    }

    @Override()
    public SegmentationResult segment(File file) throws IOException {
        return this.segment(VisionUtils.toByteArray(file));
    }

    @Override()
    public SegmentationResult segment(byte[] imageBytes) throws IOException {
        SimpleImageInfo simpleImageInfo = new SimpleImageInfo(imageBytes);
        ByteString imageData = ByteString.copyFrom(imageBytes);
        Image.Builder imageBuilder = Image.newBuilder();
        imageBuilder.setWidth(simpleImageInfo.getWidth());
        imageBuilder.setHeight(simpleImageInfo.getHeight());
        imageBuilder.setOriginalHeight(simpleImageInfo.getHeight());
        imageBuilder.setOriginalWidth(simpleImageInfo.getWidth());
        imageBuilder.setChannels(3);
        imageBuilder.setImageData(imageData);
        Image image = imageBuilder.build();
        SegmentationArray segmentationarray = segmentationStub.segment(image);
        return this.convert(segmentationarray);
    }

    @Override()
    public SegmentationResult segment(URL imageURL) throws IOException {
        return this.segment(VisionUtils.toByteArray(imageURL));
    }

    private SegmentationResult convert(SegmentationArray segmentationArray) throws IOException {
        byte[] result = segmentationArray.getResult().toByteArray();
        BufferedImage resultImage = ImageIO.read(new ByteArrayInputStream(result));
        return new SegmentationResult(resultImage, getCategories());

    }
}
