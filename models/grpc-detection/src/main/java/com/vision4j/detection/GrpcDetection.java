//Autogenerated
package com.vision4j.detection;

import com.google.protobuf.ByteString;
import com.vision4j.utils.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Map;
import java.util.stream.Collectors;

import com.vision4j.detection.grpc.DetectionGrpc;
import com.vision4j.detection.grpc.Image;
import com.vision4j.detection.grpc.DetectionResult;

public class GrpcDetection implements Detection {

    private final Categories categories;

    private final DetectionGrpc.DetectionBlockingStub detectionStub;

    public GrpcDetection(Categories categories, ManagedChannel channel) {
        this.categories = categories;
        this.detectionStub = DetectionGrpc.newBlockingStub(channel);
    }

    public GrpcDetection(String[] categoriesArray, ManagedChannel channel) {
        this.categories = new Categories(categoriesArray);
        this.detectionStub = DetectionGrpc.newBlockingStub(channel);
    }

    public GrpcDetection(String[] categoriesArray, String host, int port) {
        this(categoriesArray, ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());
    }

    public GrpcDetection(String[] categoriesArray) {
        this(categoriesArray, "localhost", 50054);
    }

    @Override()
    public DetectionResult detect(InputStream image) throws IOException {
        return this.detect(VisionUtils.toByteArray(image));
    }

    @Override()
    public DetectionResult detect(File image) throws IOException {
        return this.detect(VisionUtils.toByteArray(image));
    }

    @Override()
    public DetectionResult detect(byte[] imageBytes) throws IOException {
        Image serializedimage = this.prepareGrpcBytes(imageBytes);
        com.vision4j.detection.grpc.DetectionBoundingBoxes detectionresult = detectionStub.detect(serializedimage);
        return this.convert(detectionresult);
    }

    @Override()
    public DetectionResult detect(URL image) throws IOException {
        return this.detect(VisionUtils.toByteArray(image));
    }

    private DetectionResult convert(com.vision4j.detection.grpc.DetectionBoundingBoxes detectionBoundingBoxes) {
        DetectionResult detectionResult = new DetectionResult();

        Map<Category, DetectionResult.BoundingBox> boundingBoxes = detectionBoundingBoxes
                .getCategoriesToBoundingBoxesMap()
                .entrySet()
                .stream()
                .collect(Collectors.toMap(
                        entry -> getCategories().get(entry.ge()),
                        entry -> entry.getValue()
                        ));

        return detectionResult;
    }

    private Image prepareGrpcBytes(byte[] image) throws IOException {
        SimpleImageInfo simpleImageInfo = new SimpleImageInfo(image);
        ByteString imageData = ByteString.copyFrom(image);
        Image.Builder imageBuilder = Image.newBuilder();
        imageBuilder.setWidth(simpleImageInfo.getWidth());
        imageBuilder.setHeight(simpleImageInfo.getHeight());
        imageBuilder.setChannels(3);
        imageBuilder.setImageData(imageData);
        return imageBuilder.build();
    }

    @Override
    public Categories getCategories() {
        return categories;
    }
}
